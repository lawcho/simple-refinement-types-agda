
-- ‚Üì Mixed Big-step/Denotational semantics of SMT predicates

-- This is described hardly at all in the paper (see ¬ß2.2),
-- but needed for the semantics of "Condition"s

-- (without UFs)

module Common.VC-Semantics.Predicate where
open import Util.All

open import Common.VC-Syntax.Type
open import Common.VC-Syntax.Predicate

open import Common.VC-Semantics.Type

module Fixed-Œî
    -- ‚Üì ¬ß2.2:  Substitution (...)
    -- To avoid subsitution,
    -- I introduce "context interpretation"s
    -- (which map variables in a given context onto types)
    {Œì : Context}
    (Œî : All ‚ü¶_‚üß‚Çú Œì)
    -- (this doesn't change during recursion into predicates,
    -- so is a module-level parameter)
    where
    variable
      œÑ œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚ÇÉ : Type
      p p‚ÇÅ p‚ÇÇ p‚ÇÉ : Predicate Œì œÑ
      b b‚ÇÅ b‚ÇÇ : ùîπ
      z z‚ÇÅ z‚ÇÇ : ‚Ñ§
      v : ‚ü¶ œÑ ‚üß‚Çú
      v‚ÇÅ : ‚ü¶ œÑ‚ÇÅ ‚üß‚Çú
      v‚ÇÇ : ‚ü¶ œÑ‚ÇÇ ‚üß‚Çú
      v‚ÇÉ : ‚ü¶ œÑ‚ÇÉ ‚üß‚Çú

    -- Denotational semantics of operators
    ‚ü¶_‚üß‚Çí‚Çö : Interp-Op œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚ÇÉ ‚Üí ‚ü¶ œÑ‚ÇÅ ‚üß‚Çú ‚Üí ‚ü¶ œÑ‚ÇÇ ‚üß‚Çú ‚Üí ‚ü¶ œÑ‚ÇÉ ‚üß‚Çú
    ‚ü¶ > ‚üß‚Çí‚Çö x y = does (y ‚Ñ§.<? x)
    ‚ü¶ < ‚üß‚Çí‚Çö x y = does (x ‚Ñ§.<? y)
    ‚ü¶ ‚àß ‚üß‚Çí‚Çö x y = x ùîπ.‚àß y
    ‚ü¶ ‚à® ‚üß‚Çí‚Çö x y = x ùîπ.‚à® y
    ‚ü¶ == {ty = int}  ‚üß‚Çí‚Çö x y = does (x ‚Ñ§.‚âü y)
    ‚ü¶ == {ty = bool} ‚üß‚Çí‚Çö x y = does (x ùîπ.‚âü y)
    ‚ü¶ + ‚üß‚Çí‚Çö x y = x ‚Ñ§.+ y
    ‚ü¶ - ‚üß‚Çí‚Çö x y = x ‚Ñ§.- y


    -- Big-step semantics of predicates
    data _‚áì_ : Predicate Œì œÑ ‚Üí ‚ü¶ œÑ ‚üß‚Çú ‚Üí Set where
      ‚áìtrue  : true  ‚áì ùîπ.true
      ‚áìfalse : false ‚áì ùîπ.false
      ‚áìnum : num z ‚áì z
      ‚áìvar : ‚àÄ{ptr : œÑ ‚àà‚Çó Œì} ‚Üí v ‚â° follow ptr into Œî ‚Üí var ptr ‚áì v
      ‚áì¬¨   : p ‚áì b ‚Üí v ‚â° ùîπ.not b ‚Üí (¬¨ p) ‚áì v
      ‚áìop  : {o : Interp-Op œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚ÇÉ}
           ‚Üí p‚ÇÅ ‚áì v‚ÇÅ ‚Üí p‚ÇÇ ‚áì v‚ÇÇ
           ‚Üí v‚ÇÉ ‚â° ‚ü¶ o ‚üß‚Çí‚Çö v‚ÇÅ v‚ÇÇ
           ‚Üí (p‚ÇÅ ‚ñπ o ‚óÉ p‚ÇÇ) ‚áì v‚ÇÉ
      ‚áìif : {a‚ÇÅ a‚ÇÇ : ‚ü¶ œÑ ‚üß‚Çú} ‚Üí p ‚áì b ‚Üí p‚ÇÅ ‚áì a‚ÇÅ ‚Üí p‚ÇÇ ‚áì a‚ÇÇ
          ‚Üí v ‚â° (ùîπ.if b then a‚ÇÅ else a‚ÇÇ)
          ‚Üí (if p then p‚ÇÅ else p‚ÇÇ) ‚áì v

open Fixed-Œî renaming (_‚áì_ to _‚ä¢_‚áì_) public
